Parts Implemented by Åžahin Olut
================================

POSTS Table
-----------

.. figure:: http://i.hizliresim.com/8PPb47.jpg
  :scale: 20 %
  :alt: E/R Diagram for my tables

Posts table saves the post and its content including the title, category, creator of post. Category and post table are linked each other with category_id, which is foreign key to CATEROGIES table. Whenever a category is removed, posts with that category are removed as well.(ON CASCADE keyword used)

.. code-block:: python
  def create_post_table():
    with dbApi.connect(app.config['dsn']) as connection:
        cursor = connection.cursor()

        query = """DROP TABLE IF EXISTS POSTS"""
        cursor.execute(query)

        query = """CREATE TABLE POSTS (
                post_id SERIAL PRIMARY KEY,
                user_id INTEGER,
                category_id INTEGER,
                title VARCHAR(50),
                content VARCHAR(250)
        )"""
        cursor.execute(query)
        connection.commit()
        return True

This snippet creates the posts table. Lastest post is generated by this query.

.. code-block:: python
  def show_most_recent():
    with dbApi.connect(app.config['dsn']) as connection:
        cursor = connection.cursor()
        query= """SELECT post_id FROM POSTS ORDER BY post_id DESC LIMIT 1;"""
        cursor.execute(query)
        counter=cursor.fetchone()[0]
        query = """SELECT content,category_name FROM POSTS,CATEGORIES WHERE (post_id = %s AND POSTS.category_id=CATEGORIES.category_id)"""
        cursor.execute(query, (counter,))
        connection.commit()
        p = cursor.fetchone()
        if p is not None:
            return p
        else:
return (" ",)

New post is added by using that code snippet below.

.. code-block:: python
 @post.route("/post", methods=['GET','POST'])
    def send_form():
      title = request.form.get('title')
      content = request.form.get('post_string')
      category=request.form.get('category')
      connection = dbApi.connect(app.config['dsn'])
      with connection.cursor() as cur:
          query = """SELECT category_id FROM CATEGORIES 
                      WHERE category_name = %s"""
          cur.execute(query,(category,))
          try:
              category_id = cur.fetchone()[0]
          except:
              insert_category(category)
      connection.close()
      connection2 = dbApi.connect(app.config['dsn'])
      with connection2.cursor() as cur:
          query = """SELECT category_id FROM CATEGORIES 
                      WHERE category_name = %s"""
          cur.execute(query,(category,)) 
          category_id = cur.fetchone()[0]
          query = """INSERT INTO
                  POSTS (title,content,category_id)
                  VALUES
                      (%s, %s, %s)"""
          cur.execute(query,(title, content,category_id))  
      connection2.commit()
      connection2.close()
      return redirect('/post')
      
      
It may seem complicated but it is fairly simple. Firstly it checks the category is already present in CATEGORIES table. If it is not in CATEGORIES then it is added.

Delete and editing operations are done by that part of code

.. code-block:: python 
  @post.route("/post/delete_most_relevant_category")
  def delete_most_relevant():
    with dbApi.connect(app.config['dsn']) as connection:
        cursor = connection.cursor()
        todel=show_most_relevant()[0]
        if todel !=" ":
            query = """DELETE FROM CATEGORIES WHERE category_name='%s'""" % (todel)
            cursor.execute(query)
            connection.commit()
    return redirect('/post')
  @post.route("/edit", methods=['GET', 'POST'])
  def edit_post():
    string_to_post = request.form.get('post_string')

    with dbApi.connect(app.config['dsn']) as connection:
        cursor = connection.cursor()
        query= """SELECT post_id FROM POSTS ORDER BY post_id DESC LIMIT 1;"""
        cursor.execute(query)
        counter=cursor.fetchone()[0]
        print(string_to_post)
        query = """UPDATE POSTS SET content = %s WHERE post_id = %s;"""
        cursor.execute(query, (string_to_post, counter))
        connection.commit()
  return render_template('edit-post.html', recent_post=show_most_recent()[0])




In edit_category() function, i did some repetition but it allowed me to code faster than ever. I only wanted to show two categories so it was not a problem. However, on Job Offering page i used single function with job ids.

Job Offers
----------


Adding new job:

.. code-block:: python 
  def create_new_job(job_title, description, location, salary, is_remote):
    with dbApi.connect(app.config['dsn']) as connection:
        if is_remote == "None":
            is_remote = False
        else:
            is_remote = True

        query = """INSERT INTO JOB_OFFERS (user_id, job_title, description, location, salary, is_remote)
  VALUES (%s, '%s', '%s', '%s', %d, %s);""" % (
        current_user.id, job_title, description, location, int(salary), is_remote)

        cursor = connection.cursor()
        cursor.execute(query)
        connection.commit()
  return True

.. code-block:: python 
  def update_book(id, title, description, author, price, is_used):
      with dbApi.connect(app.config['dsn']) as connection:
          cursor = connection.cursor()
          if is_used == "on":
              is_used = True
          else:
              is_used = False

          cursor.execute("""UPDATE BOOKS SET
          title=%s,
          description=%s,
          author=%s,
          price=%s,
          is_used=%s
          WHERE id = %s;""", (title, description, author, price, is_used, id))
          connection.commit()

          return True
Code above is accomplishing the update operation.

.. code-block:: python
  def delete_offer(id):
    with dbApi.connect(app.config['dsn']) as connection:
        cursor = connection.cursor()
        query = """DELETE FROM JOB_OFFERS
        WHERE id = %s;""" % id
        cursor.execute(query)
        connection.commit()
        return True
    
This allows page to delete job offers from table.
      
      

  
